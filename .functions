#!/usr/bin/env bash

# Change directory & list contents
function cdl {
	cd "$@" && ls
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# find shorthand
# https://github.com/paulirish/dotfiles/blob/master/.functions
function f() {
    find . -name "$1"
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
    cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

# Image width
width () {
  echo $(sips -g pixelWidth $1 | grep -oE "[[:digit:]]{1,}$")
}

# Image height
height () {
  echo $(sips -g pixelHeight $1 | grep -oE "[[:digit:]]{1,}$")
}

# Copy w/ progress
cp_p () {
    rsync -WavP --human-readable --progress $1 $2
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
dataurl() {
	echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
  local ip=`localip`
	sleep 1 && open "http://${ip}:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
# https://github.com/paulirish/dotfiles/blob/master/.functions
function gf() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}

# Get gzipped file size
function gz() {
	echo "orig size (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2) tar xjf $1 ;;
            *.tar.gz) tar xzf $1 ;;
            *.bz2) bunzip2 $1 ;;
            *.rar) rar x $1 ;;
            *.gz) gunzip $1 ;;
            *.tar) tar xf $1 ;;
            *.tbz2) tar xjf $1 ;;
            *.tgz) tar xzf $1 ;;
            *.zip) unzip $1 ;;
            *.Z) uncompress $1 ;;
            *.7z) 7z x $1 ;;
            *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Gzip-enabled `curl`
function gurl() {
	curl -sH "Accept-Encoding: gzip" "$@" | gunzip
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}

function todo() {
  cd ~/.todo || return 1&& l=$(ls -1t|head -n1)&&t=$(date +%Y%m%d);
  [[ "$1" == "last" ]]&&cp $l $t;
  ${EDITOR:-vi} $t;
  cd -;
}

# Create a text file of the current working tree
function txtree() {
  tree --charset=ASCII -FnNoQ "$@".txt;
  echo -e "\nGenerated on $(date)" >> "$@".txt;
}

# Jump
export MARKPATH=$HOME/.marks
function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
    rm -i "$MARKPATH/$1"
}
function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- && echo
}
_completemarks() {
  local curw=${COMP_WORDS[COMP_CWORD]}
  local wordlist=$(gfind $MARKPATH -type l -printf "%f\n")
  COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
  return 0
}
complete -F _completemarks jump unmark

# Stop all running containers and then remove them
function drain() {
  docker ps -aq | xargs docker rm -fv
}

# Change Docker host by updating environment
function dmc {
  eval "$(docker-machine env $1)"
}

function into {
    CONTAINER=$(docker ps --format '{{ .Names }}' | grep $1 | head -n1)
    docker exec -it $CONTAINER $2
}

function forward() {
  if [ $1 == wifi ]; then
    IP=$(ifconfig | grep en0: -A6 | grep "inet " | head -n1 | cut -d" " -f2,2)
  else
    IP=$1
  fi;

  echo "$IP:$2 -> $3:$4"
  sudo ncat -l $IP $2 --sh-exec "ncat $3 $4" --keep-open
}

# OSX notification
function notify() {
  if [ -z $1 ]; then
    MSG="done"
  else
    MSG=$1
  fi
  osascript -e "display notification \"$MSG\" with title \"Terminal\"" 2>/dev/null
}

function new() {
  SKELETON=~/projects/personal/own/skeletons/$1 
  if [ -e $SKELETON ]; then
    cp -r ~/projects/personal/own/skeletons/$1 $2
    cd $2 && rm -rf .git && git init > /dev/null
    echo "Copied the skeleton and reset git."
  else
    echo "No such skeleton."
  fi
}

function phase() {
  POD="$(kubectl -n $1 get pod -o name | sed 's/pod\///' | fzf)"
  kubectl -n $1 exec -it $POD ${2:-sh}
}

function forget-pi {
  mv ~/.ssh/known_hosts ~/.ssh/known_hosts.bkup
  grep -v '^raspberrypi.local' ~/.ssh/known_hosts.bkup > ~/.ssh/known_hosts
}

function forget-minikube {
  mv ~/.ssh/known_hosts ~/.ssh/known_hosts.bkup
  grep -v '^192.168.64\.' ~/.ssh/known_hosts.bkup > ~/.ssh/known_hosts
}

function b64d {
  echo "$1" | base64 -D
}

function tap() {
  docker run --rm -it $1 ${2:-sh}
}

function copy-volume() {
  docker run --rm -it \
    -v $1:/tmp/a \
    -v $2:/tmp/b \
    alpine \
    sh -c "cd /tmp; ls a | xargs -I{} cp -r a/{} b/"
}

function col() {
  awk "{ print \$$1 }"
}

function scale-down() {
  NAMESPACE=$1
  kubectl -n $NAMESPACE get deploy | grep -v NAME | awk "{ print \$1 }" | xargs kubectl -n $NAMESPACE scale --replicas 0 deploy
}

function scale-up() {
  NAMESPACE=$1
  kubectl -n $NAMESPACE get deploy | grep -v NAME | awk "{ print \$1 }" | xargs kubectl -n $NAMESPACE scale --replicas 1 deploy
}

function clear-evicted() {
  NAMESPACE=$1
  kubectl -n $NAMESPACE get pod | grep Evicted | awk '{ print $1 }' | xargs kubectl -n $NAMESPACE delete pod --wait=false
}

function clear-all-evicted() {
  for namespace in $(kubectl get ns --no-headers | awk '{ print $1 }'); do
    kubectl -n $namespace get pod | grep Evicted | awk '{ print $1 }' | xargs kubectl -n $namespace delete pod --wait=false
  done
}

function commit-version() {
  VERSION="v$(cat VERSION)"
  git add VERSION
  git commit -m "$VERSION"
  git tag -a "$VERSION" -m "$VERSION"
}

function ki {
  NAMESPACE=$1
  kubectl -n $NAMESPACE describe pod | grep Image: | awk '{ print $2 }'
}

function list {
  NAMESPACE=$1
  OBJ=$2
  kubectl -n $1 get $2 --no-headers -o custom-columns=':metadata.name'
}

function log {
  FILE=/Users/peter/projects/personal/worklog/full-log.md
  $EDITOR $FILE
}

function kl {
  NAMESPACE=$1
  stern -n $NAMESPACE --since 10m $(list $NAMESPACE pod | fzf)
}

function delete-pods {
  kubectl -n $1 get pod --no-headers -o custom-columns=':metadata.name' | grep $2 | xargs kubectl -n $1 --wait=false delete pod
}

function waitport {
    HOST=$1
    PORT=$2

    while ! nc -z $HOST 8080; do   
      echo Not ready.
      sleep 1
    done

    echo Ready.
}
